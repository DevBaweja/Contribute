0) Determine keys and object.
keys <- ['hobbies', 'colors']
object <- {
    name: 'alice',
    hobbies: ['Golf', 'Hacking'],
    colors: ['red', 'green'],
};

1) Make sure that keys list of String or any value that can form key for object.

Correct: keys <- ['hobbies', 'colors'] 
Correct: keys <- [0,1,2,... any positive integer value]
Correct: keys <- [true, false]

As they can form key for object
object <- {
    title: 'What is best programming language?'
    0: 'Python',
    1: 'Java',
    2: 'JavaScript',
    3: 'C++',
    true: 'Correct Answer is C'
}

Incorrect: keys <- 'hobbies' | any string
As unwindAll takes list of keys


2) For each key in keys there will list in output such that it only contain unwind of that respective key.

keys <- ['hobbies', 'colors']
object <- {
    name: 'alice',
    hobbies: ['Golf', 'Hacking'],
    colors: ['red', 'green'],
};

result <- [
    [
        unwind('hobbies', object)
    ],
    [
        unwind('colors', object)
    ]
]

3) Make sure that every key in keys given is list in object so that unwind can occur on each key properly.
keys <- ['hobbies', 'colors']
object <- {
    name: 'alice',
    hobbies: ['Golf', 'Hacking'],
    colors: ['red', 'green'],
};
is correct as object['hobbies'] is ['Golf', 'Hacking'] and object['colors'] are lists and unwind can occur on it.

Correct: result <- [
    [
        {
            name: 'alice',
            hobbies: 'Golf',
            colors: ['red', 'green'],
        },
        {
            name: 'alice',
            hobbies: 'Hacking',
            colors: ['red', 'green'],
        }
    ],
    [
        {
            name: 'alice',
            hobbies: [ 'Golf', 'Hacking'],
            colors: 'red',
        },
        {
            name: 'alice',
            hobbies: ['Golf',Hacking'],
            colors: 'green',
        }
    ]
]

Also in this case keys <- ['colors', 'hobbies'] is also valid as it object[key for every keys key] is list.

Incorrect: keys <- ['name', 'colors', 'hobbies'] will be invalid as object['name'] is not list.

4) Don't treat String as list

key <- ['hobbies']
object <- {
    name: 'alice',
    hobbies: 'Golf'
}

Incorrect: result <- [
    [
        { name: 'alice', hobbies: 'G'},
        { name: 'alice', hobbies: 'o'},
        { name: 'alice', hobbies: 'l'},
        { name: 'alice', hobbies: 'f'},
    ]
]

Correct: result <- [
    [
        { name: 'alice', hobbies: 'Golf'}
    ]
]

4) Don't do anything if object[key] is not iterable (for now list only).

In case where there is not property in object named as key.
keys <- ['hobbies']
object <- { 
    name: 'Fred', 
    pastimes: ['Juggling', 'Sleeping'] 
}

Correct: result <- [ 
    [
        { name: 'Fred', pastimes: ['Juggling', 'Sleeping'] } 
    ]
]

In case where there is property in object named as key but it is not iterable

object <- {
    name: 'Barney',
    hobbies: NaN
}

Correct: result <- [
    [
        { name: 'Barney', hobbies: NaN }
    ]
]

5) If key is empty string or empty object.

keys <- ['' | {}]
object <- {
    name: 'Barney',
    hobbies: ['Golf', 'Hacking']
}

Correct: result <- [
    [
        { name: 'Barney' ,hobbies: ['Golf', 'Hacking'] }
    ]
]

6) No renaming of keys of object.

key <- {hobbies: 'hobby'} || {hobby: 'hobby'}
Simply treat it as no-op (no operation).

7) Keys order don't matter
keys <- ['hobbies', 'colors']
keys <- ['colors', 'hobbies']

will lead to the same result

8) Do the unwind for only property in object named as key. No-op for invalid keys

keys <- ['hobbies', 'colors', 'passtime']
object <- {
    name: 'alice',
    hobbies: ['Golf', 'Hacking],
    colors: ['red', 'green']
}

result <- [
    [
        unwind(hobbies, object)
    ],
    [
        unwind(colors, object)
    ],
    [
        unwind(passtime, object) as there is no property named passtime in object
    ]
]

So last list will be discarded and will act as no-op for that specific key ie passtime.